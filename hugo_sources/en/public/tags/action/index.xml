<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Action on Основи Cocos2d-x</title>
    <link>https://beardog-ukr.github.io/cocos2dx-examples/tags/action/</link>
    <description>Recent content in Action on Основи Cocos2d-x</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>uk-UA</language>
    <lastBuildDate>Sun, 29 Mar 2020 21:30:25 +0300</lastBuildDate>
    
	<atom:link href="https://beardog-ukr.github.io/cocos2dx-examples/tags/action/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Послідовності</title>
      <link>https://beardog-ukr.github.io/cocos2dx-examples/post/basic-sequence/</link>
      <pubDate>Sun, 29 Mar 2020 21:30:25 +0300</pubDate>
      
      <guid>https://beardog-ukr.github.io/cocos2dx-examples/post/basic-sequence/</guid>
      <description>Якщо вам потрібно виконати кілька акцій одну за одною, на допомогу прийде клас Sequence.
Наприклад, синій корабель за помовчанням створюється &amp;ldquo;носом доверху&amp;rdquo;. Щоб зобразити його &amp;ldquo;переліт&amp;rdquo; направо, спочатку треба зробити поворот на 90 градусів, а вже потім переміщувати.
Для того, щоб це спрацювало, треба створити акції RotateTo та MoveTo, а потім об&#39;єднати їх у послідовність:
RotateBy* rotateBy = RotateBy::create(2, 90); MoveBy* moveBy = MoveBy::create(4, Vec2(160,0)); Sequence* seq = Sequence::create(rotateBy, moveBy, nullptr); blueShip-&amp;gt;runAction(seq); Фабричний метод, який створює Sequence, може отримувати будь-яке число вказівників на об&#39;єкти-нащадки Action, а останнім обов&#39;язково має бути nullptr.</description>
    </item>
    
    <item>
      <title>Анімація</title>
      <link>https://beardog-ukr.github.io/cocos2dx-examples/post/basic-animations/</link>
      <pubDate>Sun, 29 Mar 2020 17:30:25 +0300</pubDate>
      
      <guid>https://beardog-ukr.github.io/cocos2dx-examples/post/basic-animations/</guid>
      <description>Ще одним способом створення &amp;ldquo;живого&amp;rdquo; об&#39;єкту є анімація. Художники малюють ряд кадрів, а Cocos2d їх послідовно показує, використовуючи клас Animation. Робота з ним схожа на інші акції, хоча сам клас має трошки інше походження.
Для прикладу візьмемо анімацію атаки скелету з безкоштовного паку. Ось кадри:
 А так має виглядати результат:  https://github.com/cocos2d/cocos2d-x/blob/v4/cocos/base/ccMacros.h</description>
    </item>
    
    <item>
      <title>Рух та інші перетворення об&#39;єктів</title>
      <link>https://beardog-ukr.github.io/cocos2dx-examples/post/basic-actions/</link>
      <pubDate>Sun, 29 Mar 2020 15:55:25 +0300</pubDate>
      
      <guid>https://beardog-ukr.github.io/cocos2dx-examples/post/basic-actions/</guid>
      <description>Ми вже вміємо обробляти події клавіатури або натискання на кнопки. Тепер треба починати реагувати на ці події та щось зробити з об&#39;єктом.
Наприклад, ви хочете, щоб після натиснення кнопки спрайт перемістився з одного місця екрану до іншого. Для того, щоб це виглядало саме як пересування, а не телепортація, координати треба змінювати дуже маленькими, але частими порціями, десятки разів на секунду. Вручну це програмувати незручно, тому у Cococ2d зробили клас Action та його нащадки.</description>
    </item>
    
  </channel>
</rss>