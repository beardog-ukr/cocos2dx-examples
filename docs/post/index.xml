<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Основи Cocos2d-x</title>
    <link>https://beardog-ukr.github.io/cocos2dx-examples/post/</link>
    <description>Recent content in Posts on Основи Cocos2d-x</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>uk-UA</language>
    <lastBuildDate>Sun, 22 Mar 2020 21:30:25 +0300</lastBuildDate>
    
	<atom:link href="https://beardog-ukr.github.io/cocos2dx-examples/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Структура проекту</title>
      <link>https://beardog-ukr.github.io/cocos2dx-examples/post/project-structure/</link>
      <pubDate>Sun, 22 Mar 2020 21:30:25 +0300</pubDate>
      
      <guid>https://beardog-ukr.github.io/cocos2dx-examples/post/project-structure/</guid>
      <description>Не знаю, чи помітили ви, але навіть елементарний тестовий проект (такий, як було створено у початковій статті) займає досить багато місця — триста мегабайт до початку компіляції та більше п&#39;ятисот після. У старіших версіях фреймворку ситуація була ще гірше — невелика гра в процесі розробки займала майже гігабайт. Насправді, воно не так вже й важливо, але коли у вас багато тестових проектів, місце раптом закінчується.
Проект cocos2d-x має приблизно таку структуру:</description>
    </item>
    
    <item>
      <title>Інформація</title>
      <link>https://beardog-ukr.github.io/cocos2dx-examples/post/info_sources/</link>
      <pubDate>Sun, 22 Mar 2020 11:30:25 +0300</pubDate>
      
      <guid>https://beardog-ukr.github.io/cocos2dx-examples/post/info_sources/</guid>
      <description>Документації по Cocos2d-x порівняно небагато, але досить для вивчення. Проблема в тому, що у більшості випадків вона застаріла, тому доведеться співвідносити написане і реальний стан речей.
Спочатку &amp;ldquo;офіційні&amp;rdquo; джерела:
 посібник з основними термінами. Застарілий російськомовний переклад можна знайти на хабрі. документація по коду, згенерована Doxygen форум, там багато навчальних матеріалів, але вони теж сильно застаріли. функціональні тести — розробники розглядають їх як демонстрацію того, як правильно використовувати програмний каркас. На форумі часто можуть порадити &amp;ldquo;глянути, як зроблено в тестах&amp;rdquo;  Крім того, у різних блогах є серії постів, присвячених cocos2d-x:</description>
    </item>
    
    <item>
      <title>Знайомство</title>
      <link>https://beardog-ukr.github.io/cocos2dx-examples/post/first-steps/</link>
      <pubDate>Sat, 21 Mar 2020 17:30:25 +0300</pubDate>
      
      <guid>https://beardog-ukr.github.io/cocos2dx-examples/post/first-steps/</guid>
      <description>Cocos2d-x — це фреймворк для створення кросплатформенних 2d-ігор на C++. З ним можна створювати відносно прості ігри типу Flappy Bird abo Fruit Ninja, а також більш складні сайд-скроллери та навіть стратегії.
Перебування на карантині можна розглядати як привід вивчити щось нове, тому я спробую зробити серію постів, що описують основи цього програмного каркасу.
 Встановлення Процес встановлення непогано описаний для різних платформ в офіційній документації. Також відносно свіжі інструкції можна знайти у цьому блозі:linux або Windows.</description>
    </item>
    
    <item>
      <title>Action: move sprite over screen</title>
      <link>https://beardog-ukr.github.io/cocos2dx-examples/post/basic-actions/</link>
      <pubDate>Sat, 21 Sep 2019 15:55:25 +0300</pubDate>
      
      <guid>https://beardog-ukr.github.io/cocos2dx-examples/post/basic-actions/</guid>
      <description>Use actions to move some sprites over the screeen
Keyboard processing First, initialize keyboard processing with following code
 auto sceneKeyboardListener = EventListenerKeyboard::create(); sceneKeyboardListener-&amp;gt;onKeyPressed = CC_CALLBACK_2(MainGameScene::onKeyPressedScene, this); _eventDispatcher-&amp;gt;addEventListenerWithSceneGraphPriority(sceneKeyboardListener, this); then process it like
void MainGameScene::onKeyPressedScene(EventKeyboard::KeyCode keyCode, Event *event) { log(&amp;quot;%s: processing key %d pressed&amp;quot;, __func__, (int)keyCode); switch (keyCode) { case EventKeyboard::KeyCode::KEY_UP_ARROW: do_something_for_up_arrow(); break; // more options here default: log(&amp;quot;%s: key %d will be ignored&amp;quot;, __func__, (int)keyCode); } } Action class To be done.</description>
    </item>
    
    <item>
      <title>Hello Friend</title>
      <link>https://beardog-ukr.github.io/cocos2dx-examples/post/hello/</link>
      <pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://beardog-ukr.github.io/cocos2dx-examples/post/hello/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam nec interdum metus. Aenean rutrum ligula sodales ex auctor, sed tempus dui mollis. Curabitur ipsum dui, aliquet nec commodo at, tristique eget ante. Donec quis dolor nec nunc mollis interdum vel in purus. Sed vitae leo scelerisque, sollicitudin elit sed, congue ante. In augue nisl, vestibulum commodo est a, tristique porttitor est. Proin laoreet iaculis ornare. Nullam ut neque quam.
 Fusce pharetra suscipit orci nec tempor.</description>
    </item>
    
  </channel>
</rss>